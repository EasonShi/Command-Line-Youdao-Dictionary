#!/usr/bin/env ruby
# encoding: utf-8

require 'net/http'
require 'rexml/document'

include REXML

def translate(word)
  unless word.nil? or word.empty?
    __ "dict translation: #{word}", "="
    parse Net::HTTP.get( "dict.youdao.com", "/fsearch?q=#{word}" )
  end
end

def parse(src)
  xml = Document.new(src)
  parse_phonetic_symbol xml
  parse_dict_trans      xml

  __ "web translation", "="
  parse_web_trans       xml
end

def parse_phonetic_symbol( xml )
  xml.each_node('//phonetic-symbol') { |node|
    if node.text
      indent
      puts "[#{node.text}]".cyan
    end
  }
end

def parse_dict_trans( xml )
  xml.each_node('//translation/content') { |node|
    indent
    puts node.text.green
  }
end

def parse_web_trans( xml )
  xml.each_node('//yodao-web-dict/web-translation') { |node|
    __ node.first_node('key/').text
    node.each_node('trans/value/') { |val|
      indent
      puts val.text
    }
  }
end

def __(t, pad='-', len=30 )
  puts " #{t} ".center(len, pad)
end

def indent(idt=2)
  print " " * idt
end

# REXML::Element patch
# for better readablitiy
class Element
  def each_node(path, &block); XPath.each(self, path, &block); end
  def first_node(path); XPath.first(self, path); end
end

class String
  COLORS = %w(black red green yellow blue magenta cyan white)
  COLORS.each_with_index do |color, idx|
    define_method color do
      "\e[3#{idx}m" << self.to_s << "\e[0m"
    end

    define_method "#{color}_bg" do
      "\e[4#{idx}m" << self.to_s << "\e[0m"
    end
  end
end

translate(ARGV[0]) if __FILE__ == $0
